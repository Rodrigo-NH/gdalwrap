from random import random
import os
from gdalwrap import Setsource
from gdalwrap import makepol
from gdalwrap import Layergrid
from gdalwrap import layerclip
from gdalwrap import splitvertices
from gdalwrap import splitrings
from gdalwrap import Transformation

# ZIP with files used in these examples: https://github.com/Rodrigo-NH/assets/blob/main/files/gdalwrap/examples.zip
# Set examplepath pointing to folder containing files extracted from ZIP
examplespath = r'D:\shapes'

def main():
    # Pick your example:
    example01()  # Iterate over shapefile attributes and geoms
    example02()  # Create memory shapefile, populate with random polygons, get/set/change attributes
    example03()  # Layergrid grid generator function example
    example04()  # layerclip function
    example05()  # splitvertices function
    example06()  # splitrings + splitvertices function
    example07()  # Iterate over KML/KMZ file features
    example08()  # Saves a shapefile to GPKG and KML files
    example09()  # Export KMZ to a multilayer GPKG
    example10()  # Export KMZ to multiple SHP files grouped by geometry type


def example01():
    inputshape = os.path.join(examplespath, 'TM_WORLD_BORDERS_SIMPL-0.3.shp')
    inshp = Setsource(inputshape, Action='open r')
    inshp.getlayer(0)
    fields = inshp.getattrtable()
    print(fields)
    for t in range(0, inshp.featurecount()):
        feature = inshp.getfeature(t) #return OGR feature and set current objects for the other methods (.getgeom() e.g.)
        geom = inshp.geom
        FID = inshp.fid
        print(str(t) + " = " + str(FID))
        print("Field: " + fields[4][0] + ' --> ' + str(feature.GetField(fields[4][0])))
        print(geom)


def example02():
    outshp = Setsource('myMemLayer', Action='memory')
    outshp.createlayer('layer1', '4326', Type='polygon')
    outshp.createattr('Name', 'string')  # Create attribute field
    outshp.createattr('NIindex', 'integer')
    for t in range(0, 10):
        randompol = [[random(), -abs(random())], [random(), random()],
                     [-abs(random()), random()], [-abs(random()), -abs(random())]]
        geom = makepol(randompol)
        outshp.geom2feature(geom)  #creates new feature and record geom (returns the feature to a variable, optionally)
        outshp.setfield('Name', 'NI-' + str(t))
        outshp.setfield('NIindex', t)

    filepath = os.path.join(examplespath, 'example02.shp')
    outshp.savefile(filepath)  # Save from memory to file

    rework = Setsource(filepath, Action='open rw')  # Open recently created shape in RW mode
    print(rework.srs)  # Prints shape SRS OpenGIS Well Known Text format
    rework.getlayer(0)
    print(rework.featurecount())  # Prints number of features in the shape
    rework.getfeature(5)  # Get feature FID=5 (and makes it the current feature),
                            # returns the feature to a variable, optionally
    rework.setfield('Name', 'NotInterested')  # Change current selected feature attr field


def example03():
    inputshape = os.path.join(examplespath, 'TM_WORLD_BORDERS_SIMPL-0.3.shp')
    outputshape = os.path.join(examplespath, 'example03.shp')
    inshp = Setsource(inputshape, Action='open r')
    inshp.getlayer(0)
    outshp = Setsource(outputshape, Action='create')
    outshp.createlayer('', inshp.srs, Type=inshp.layertypestr)
    outshp.createattr('gridIndex', 'string')

    grid = Layergrid(inshp.layer, 10, 5, Type='tilenumbers') # Creates a grid layer, steps in map units (e.g. decimal degrees)
    print(grid.getsrs()) #Layergrid inherits srs from input shapefile
    gridcol = grid.getgrid() #get list of polygons from grid
    for t in range(0,len(gridcol)):
        geom = gridcol[t]
        outshp.geom2feature(geom) #record feature (returns the feature to a variable, optionally)
        gridindex = grid.gridindex[t] #get autogenerated index for grid tile
        outshp.setfield('gridIndex', gridindex) #set attribute value for current, working feature


def example04():
    inputshape = os.path.join(examplespath, 'TM_WORLD_BORDERS_SIMPL-0.3.shp')
    outputshape = os.path.join(examplespath, 'example04.shp')
    inshp = Setsource(inputshape, Action='open r')
    inshp.getlayer(0)
    outshp = Setsource(outputshape, Action='create')
    outshp.createlayer('layer1', inshp.srs, Type='polygon')
    inlayer = inshp.layer
    grid = Layergrid(inlayer, 10, 5, Type='mapunits')
    gridcol = grid.getgrid()  # get list of polygons from grid
    fields = inshp.getattrtable()
    outshp.setattrtable(fields)
    for t in range(0, len(gridcol)):
        clipfeatures = layerclip(inlayer, gridcol[t])
        for feature in clipfeatures:
            outshp.createfeature(feature)


def example05():
    inshape = os.path.join(examplespath, 'TM_WORLD_BORDERS_SIMPL-0.3.shp')
    outshape = os.path.join(examplespath, 'example05.shp')
    inshp = Setsource(inshape, Action='open r')
    inshp.getlayer(0)
    outshp = Setsource('mymemlayer', Action='memory')
    outshp.createlayer('layer1', inshp.srs, Type='Polygon')
    fields = inshp.getattrtable()
    outshp.setattrtable(fields)
    for t in range(0, inshp.featurecount()):
        featset = splitvertices(inshp.getfeature(t), 50)
        for each in featset:
            outshp.createfeature(each)
    outshp.savefile(outshape)


def example06():
    inshape = os.path.join(examplespath, 'rings.shp')
    outshape = os.path.join(examplespath, 'example06.shp')
    inshp = Setsource(inshape, Action='open r')
    inshp.getlayer(0)
    outshp = Setsource('mymemlayer', Action='memory')
    outshp.createlayer('layer1', inshp.srs, Type='Polygon')
    fields = inshp.getattrtable()
    outshp.setattrtable(fields)
    for t in range(0, inshp.featurecount()):
        featset = splitrings(inshp.getfeature(t))
        for each in featset:
            featset2 = splitvertices(each, 50)
            for f in featset2:
                outshp.createfeature(f)
    outshp.savefile(outshape)


def example07():
    filepath = os.path.join(examplespath, 'examplekmz.kmz')
    kmzset = Setsource(filepath, Action='open r')
    for g in range(0, kmzset.layercount()):
        kmzset.getlayer(g)
        attrbt = kmzset.getattrtable()
        print(attrbt)
        for t in range(0, kmzset.featurecount()):
            uai = kmzset.getfeature(t)
            ff = kmzset.getfield('Name')
            print(ff)
            print(kmzset.geom)


def example08():
    input = os.path.join(examplespath, 'example02.shp')
    dest = Setsource(input, Action='open r')

    output = os.path.join(examplespath, 'example02.gpkg')
    dest.savefile(output)
    output = os.path.join(examplespath, 'example02.kml')
    dest.savefile(output)


def example09():  # Export KMZ to a multilayer GPKG. KMZ contains mixed geometry types per 'layer'.
                    # Separate geoms by type, create a separate layer for each type and save to GPKG

    input = os.path.join(examplespath, 'examplekmz.kmz')
    output = os.path.join(examplespath, 'examplekmz.gpkg')
    work = Setsource(input, Action='open r')
    tempw = Setsource('tempsource', Action='memory')

    geomtypes = []
    for li in range(0, work.layercount()):
        work.getlayer(li)
        attrbt = work.getattrtable()
        for lg in range(0, work.featurecount()):
            tf = work.getfeature(lg)
            tg = work.geom
            gt = work.geomtypestr
            if gt not in geomtypes:
                geomtypes.append(gt)
                tempw.createlayer(gt, '4326', Type=gt)
                tempw.setattrtable(attrbt)
            layindex = geomtypes.index(gt)
            tempw.getlayer(layindex)
            tempw.createfeature(tf)
    tempw.savefile(output)


def example10():  # Export KMZ to multiple SHP files. KMZ contains mixed geometry types per 'layer'.
                # Separate geoms by type, create a separate SHP file for each type

    input = os.path.join(examplespath, 'examplekmz.kmz')
    output = os.path.join(examplespath, 'examplekmz.shp')
    work = Setsource(input, Action='open r')

    geomtypes = []
    tempsources = []
    for li in range(0, work.layercount()):
        work.getlayer(li)
        attrbt = work.getattrtable()
        for lg in range(0, work.featurecount()):
            tf = work.getfeature(lg)
            tg = work.geom
            gt = work.geomtypestr
            if gt not in geomtypes:
                tempw = Setsource(gt, Action='memory')
                geomtypes.append(gt)
                tempw.createlayer(gt, '4326', Type=gt)
                tempw.setattrtable(attrbt)
                tempsources.append(tempw)
            sourceindex = geomtypes.index(gt)
            tw = tempsources[sourceindex]
            tw.getlayer(0)
            tw.createfeature(tf)

    for index in range(0, len(geomtypes)):
        sptx = os.path.splitext(output)
        outfile = os.path.join(sptx[0] + '_' + geomtypes[index].replace(' ', '') + sptx[1])
        tw = tempsources[index]
        tw.savefile(outfile)


if __name__ == "__main__":
    main()